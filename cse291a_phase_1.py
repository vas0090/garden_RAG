# -*- coding: utf-8 -*-
"""cse291A_Phase_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EmrlllwkpErWTBP_LJMIVnkk4YWbrZWV

1. Data Preprocessing
"""

# !pip install qdrant-client sentence-transformers pandas tqdm

# !pip install numpy

# pip install beautifulsoup4

# pip install python-dotenv

# Imports
# Core libraries
import pandas as pd
import json
import numpy as np


# Sentence transformer for embeddings
from sentence_transformers import SentenceTransformer

# Qdrant client for vector database
from qdrant_client import QdrantClient
from qdrant_client.models import Distance, VectorParams, PointStruct

# Optional: show progress, handle warnings
from tqdm import tqdm
import warnings
warnings.filterwarnings("ignore")

# BeautifulSoup Import
from bs4 import BeautifulSoup

# --- Step 1: Load JSONL dataset ---
json_data = []
with open("dataset_plants_v5.jsonl", "r") as f:
    for line in f:
        json_data.append(json.loads(line))

df_json = pd.DataFrame(json_data)

print("JSONL Dataset Loaded")
print("Shape:", df_json.shape)
print("Columns:", df_json.columns.tolist())
print("\nSample rows from JSONL dataset:")
print(df_json.head(5))


# --- Step 2: Load Indoor Plant Health CSV ---
df_csv = pd.read_csv("Indoor_Plant_Health_and_Growth_Factors.csv")

print("\n Indoor Plant Health CSV Loaded")
print("Shape:", df_csv.shape)
print("Columns:", df_csv.columns.tolist())
print("\nSample rows from CSV dataset:")
print(df_csv.head(5))

# --- Clean HTML helper ---
def clean_html(text):
    if pd.isna(text):
        return ''
    return BeautifulSoup(str(text), 'html.parser').get_text(separator=' ', strip=True)


# --- Clean JSON columns (keep same logic) ---
for col in ['instruction', 'response']:
    if col in df_json.columns:
        df_json[col] = df_json[col].apply(clean_html)


# --- Create readable text from JSON dataset ---
df_json['formatted_text'] = "Q: " + df_json['instruction'].astype(str) + " A: " + df_json['response'].astype(str)


# --- Convert Indoor Plant CSV rows into natural language descriptions ---
def row_to_sentence(row):
    # Create a sentence describing all numerical + categorical info
    parts = []
    for col, val in row.items():
        if pd.notna(val):
            parts.append(f"{col.replace('_', ' ')} is {val}")
    return ". ".join(parts) + "."

# Apply this to every row in the CSV
df_csv['formatted_text'] = df_csv.apply(row_to_sentence, axis=1)


# --- Combine both datasets into a single text column ---
combined_df = pd.DataFrame({
    'text': pd.concat([df_json['formatted_text'], df_csv['formatted_text']], ignore_index=True)
})


# --- Save the result ---
combined_df.to_csv('combined_plants_dataset.csv', index=False)

print("Combined dataset created and saved!")
print("Shape:", combined_df.shape)
print(combined_df.sample(5))

"""2. Make Embeddings for our data"""

# --- Step 1: Load your prepared combined dataset ---
combined_df = pd.read_csv("combined_plants_dataset.csv")

print("Combined dataset loaded for embedding creation!")
print("Shape:", combined_df.shape)
print(combined_df.head(5))

# --- Step 2: Prepare the text data for embedding ---
# Make sure column name matches what you saved earlier
texts = combined_df['text'].astype(str).tolist()

print(f"Number of text entries to embed: {len(texts)}")

# --- Step 3: Load the SentenceTransformer model ---
# You can pick a smaller or larger model depending on speed/accuracy tradeoff
model = SentenceTransformer('all-MiniLM-L6-v2')

# --- Step 4: Create embeddings ---
embeddings = model.encode(texts, show_progress_bar=True, convert_to_numpy=True)

print("Embeddings created!")
print("Shape of embeddings array:", embeddings.shape)

# --- Step 5: Save embeddings (for reuse or upload to Qdrant later) ---
import pickle

with open("plant_embeddings.pkl", "wb") as f:
    pickle.dump({'texts': texts, 'embeddings': embeddings}, f)

print("Embeddings and texts saved to 'plant_embeddings.pkl'")

"""3. Setting up Qdrant"""

from qdrant_client import QdrantClient
from dotenv import load_dotenv
import os

# get the api key from the dotenv 
load_dotenv()  # reads .env into os.environ
gardening_api_key = os.getenv("QDRANT_API_KEY")
gardening_url = os.getenv("QDRANT_URL")

# Replace these with your actual credentials
QDRANT_URL = gardening_url 
QDRANT_API_KEY = gardening_api_key 

# Connect to your Qdrant cloud cluster
client = QdrantClient(
    url=QDRANT_URL,
    api_key=QDRANT_API_KEY
)

# Test connection
print("Connected to Qdrant!")
print("Collections available:", client.get_collections())

import pickle

with open("plant_embeddings.pkl", "rb") as f:
    data = pickle.load(f)

texts = data["texts"]
embeddings = data["embeddings"]

print("Embeddings loaded!")
print("Number of entries:", len(texts))
print("Embedding dimension:", embeddings.shape[1])

from qdrant_client.models import Distance, VectorParams

# Create a collection (name it something relevant)
collection_name = "qa_embeddings"

client.recreate_collection(
    collection_name=collection_name,
    vectors_config=VectorParams(size=384, distance=Distance.COSINE)
)

print(f"Collection '{collection_name}' created successfully!")

import pickle

with open("plant_embeddings.pkl", "rb") as f:
    data = pickle.load(f)

# Check the type and a quick sample
print("Type:", type(data))

# If it's a dictionary, show the keys
if isinstance(data, dict):
    print("Keys:", data.keys())

# If it's a list, show the type of the first element
elif isinstance(data, list) and len(data) > 0:
    print("First element type:", type(data[0]))
    print("Sample:", data[0])

from qdrant_client.models import PointStruct
import uuid
import pickle
import numpy as np

# --- Load the pickle ---
with open("plant_embeddings.pkl", "rb") as f:
    data = pickle.load(f)

texts = data["texts"]
embeddings = np.array(data["embeddings"])

print(f"Loaded {len(texts)} entries with dimension {embeddings.shape[1]}")

# --- Confirm connection ---
print("Collections available:", client.get_collections())

collection_name = "qa_embeddings"

points = [
    PointStruct(
        id=str(uuid.uuid4()),  # unique ID per item
        vector=embeddings[i].tolist(),
        payload={"text": texts[i]}  # store the full QA text as metadata
    )
    for i in range(len(texts))
]

# Upload the data 
client.upsert(collection_name=collection_name, points=points)

print(f"Uploaded {len(points)} embeddings to collection '{collection_name}'!")

collection_info = client.get_collection(collection_name)
print("Collection info:", collection_info)

query = "How does potatoes grow?"
query_vec = model.encode(query).tolist()

results = client.search(collection_name=collection_name, query_vector=query_vec, limit=3)
for r in results:
    print(f"Score: {r.score:.4f} | Text: {r.payload['text'][:150]}...")

import boto3, json

bedrock = boto3.client(
    service_name="bedrock-runtime",
    region_name="us-west-2"   # same region as your Bedrock access
)
def ask_titan(prompt, max_tokens=300):
    body = json.dumps({
        "inputText": prompt,
        "textGenerationConfig": {
            "maxTokenCount": max_tokens,
            "temperature": 0.3,
            "topP": 0.9
        }
    })

    response = bedrock.invoke_model(
        modelId="amazon.titan-text-lite-v1",
        body=body,
        contentType="application/json"
    )

    result = json.loads(response["body"].read())
    return result["results"][0]["outputText"]

# from sentence_transformers import SentenceTransformer

model = SentenceTransformer('all-MiniLM-L6-v2')

def ask_with_context(query):
    # Encoding the query
    query_vec = model.encode(query).tolist()

    # Retrieving top matches from Qdrant
    results = client.search(
        collection_name="qa_embeddings",
        query_vector=query_vec,
        limit=3
    )

    # Combine retrieved context
    context_texts = [r.payload["text"] for r in results]
    context = "\n\n".join(context_texts)

    # Build final LLM prompt
    prompt = f"What regional climate and soil pH conditions produce optimal potato yields?\n\nContext: {context}\n\nQuestion: {query}\n\nAnswer:"


    # Generate answer from Titan
    answer = ask_titan(prompt)
    print("Titan Answer:")
    print(answer)
    return answer

# --- Old Precision@k ---
def precision_at_k(retrieved, relevant, k):
    retrieved_k = retrieved[:k]
    intersection = len(set(retrieved_k) & set(relevant))
    return intersection / k if k > 0 else 0

# --- Old Recall@k ---
def recall_at_k(retrieved, relevant):
    intersection = len(set(retrieved) & set(relevant))
    return intersection / len(relevant) if len(relevant) > 0 else 0

# --- Old F1 Score ---
def f1_score(p, r):
    return 2 * (p * r) / (p + r) if (p + r) > 0 else 0

# --- Old Mean Reciprocal Rank (MRR) ---
def mean_reciprocal_rank(all_results):
    reciprocal_ranks = []
    for retrieved, relevant in all_results:
        rank = None
        for i, doc in enumerate(retrieved):
            if doc in relevant:
                rank = i + 1
                break
        if rank:
            reciprocal_ranks.append(1 / rank)
        else:
            reciprocal_ranks.append(0)
    return np.mean(reciprocal_ranks)

if __name__ == "__main__":
    user_query0 = "What regional climate and soil pH conditions produce optimal potato yields?"
    ask_with_context(user_query0)
    user_query1 = "What methods are most effective for preventing insect infestations in strawberry plants without chemical pesticides?"
    ask_with_context(user_query1)
    user_query2 = "Why do hydrangea flowers change color each year, and how can I control the shade?"
    ask_with_context(user_query2)
    user_query3 = "How should I prepare my garden soil and perennials for winter to promote vigorous spring regrowth?"
    ask_with_context(user_query3)
    user_query4 = "Which vegetable pairs exhibit beneficial companion-planting relationships that improve soil nutrients and pest resistance?"
    ask_with_context(user_query4)
    user_query5 = "What visual and growth indicators show that an indoor plant is thriving and well-adjusted to its environment?"
    ask_with_context(user_query5)
    user_query6 = "How frequently should I rotate crops in a home vegetable garden, and what crop families should follow each other to maintain soil fertility?"
    ask_with_context(user_query6)
    user_query7 = "What are the most common causes of leaf yellowing and wilting in indoor plants, and how can they be corrected?"
    ask_with_context(user_query7)
    user_query8 = "Can a plant survive or grow in complete darkness, and what physiological processes are affected?"
    ask_with_context(user_query8)
    user_query9 = "How should I design a raised bed garden to optimize drainage, root health, and overall yield?"
    ask_with_context(user_query9)
    ground_truth = {
        "What regional climate and soil pH conditions produce optimal potato yields?": [
            "Potatoes perform best in cool temperate climates with daytime temperatures between 15–20°C and minimal frost exposure. Optimal soil pH ranges from 5.0–6.0 to prevent scab disease. Well-drained, loamy soils with moderate moisture retention are ideal for tuber expansion and nutrient uptake."
        ],
        "What methods are most effective for preventing insect infestations in strawberry plants without chemical pesticides?": [
            "Effective non-chemical controls include using neem oil sprays weekly during early fruiting, introducing ladybugs for aphid control, and installing fine mesh netting to deter fruit flies. Intercropping with marigolds also reduces nematode and beetle pressure under humid conditions."
        ],
        "Why do hydrangea flowers change color each year, and how can I control the shade?": [
            "Hydrangea color shifts occur because anthocyanin pigments react to soil acidity. Acidic soils (pH 5.0–5.5) produce blue blooms due to aluminum availability, while alkaline soils (pH 6.5–7.0) yield pink shades. Adding garden lime raises pH for pink tones; sulfur lowers it for blue."
        ],
        "How should I prepare my garden soil and perennials for winter to promote vigorous spring regrowth?": [
            "Cut back dead foliage after the first frost, apply 5–8 cm of organic mulch to insulate roots, and sow cover crops like clover to prevent erosion and fix nitrogen. Avoid heavy watering before freeze events to reduce heaving and root damage."
        ],
        "Which vegetable pairs exhibit beneficial companion-planting relationships that improve soil nutrients and pest resistance?": [
            "Beans and corn form a classic symbiotic pair: beans fix nitrogen, enriching soil for corn. Basil deters tomato hornworms when planted beside tomatoes, while carrots and onions repel each other’s pests through complementary volatile compounds."
        ],
        "What visual and growth indicators show that an indoor plant is thriving and well-adjusted to its environment?": [
            "Healthy indoor plants show firm, turgid leaves, vivid coloration, and steady new leaf or bud formation. Shiny leaves and consistent growth rates indicate proper humidity and sufficient light exposure. Brown tips or stunted growth suggest imbalance."
        ],
        "How frequently should I rotate crops in a home vegetable garden, and what crop families should follow each other to maintain soil fertility?": [
            "Rotate crops annually to prevent nutrient depletion. Follow nitrogen-fixing legumes (peas, beans) with root crops (carrots, onions), and then fruiting crops (tomatoes, peppers). Avoid repeating family groups within three years to minimize disease buildup."
        ],
        "What are the most common causes of leaf yellowing and wilting in indoor plants, and how can they be corrected?": [
            "Yellowing leaves usually result from overwatering or nitrogen deficiency. Allow the soil to dry between waterings and apply a balanced fertilizer (10-10-10). Wilting under dry conditions signals water stress; increase humidity or watering frequency accordingly."
        ],
        "Can a plant survive or grow in complete darkness, and what physiological processes are affected?": [
            "Plants cannot grow indefinitely in total darkness because photosynthesis ceases without light. They exhibit etiolation, elongated stems and pale leaves, caused by chlorophyll loss and energy depletion. Prolonged darkness leads to carbohydrate starvation and death."
        ],
        "How should I design a raised bed garden to optimize drainage, root health, and overall yield?": [
            "A well-designed raised bed should be 25–35 cm deep with layered soil: coarse gravel at the base for drainage, followed by loam and compost for aeration and nutrients. A slight 2–3% slope promotes runoff while preventing root rot and maintaining high yields."
        ]
    }
    retrieval_results = []
    for query, relevant_docs in ground_truth.items():
        query_vec = model.encode(query).tolist()
        results = client.search(collection_name="qa_embeddings", query_vector=query_vec,limit=5)
        retrieved_docs = [r.id for r in results]
        p = precision_at_k(retrieved_docs, relevant_docs, k=5)
        r = recall_at_k(retrieved_docs, relevant_docs)
        f1 = f1_score(p, r)
        print(f"\nQuery: {query}")
        #print(f"Precision@5={p:.2f}, Recall={r:.2f}, F1={f1:.2f}")
        retrieval_results.append((retrieved_docs, relevant_docs))
    mrr = mean_reciprocal_rank(retrieval_results)
    #print(f"\nOverall Mean Reciprocal Rank (MRR): {mrr:.2f}")
